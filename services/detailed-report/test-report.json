{
  "numTotalTests": 112,
  "numPassedTests": 112,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "startTime": "2025-08-01T08:50:50.563Z",
  "endTime": "2025-08-01T08:50:57.564Z",
  "testResults": [
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\services\\penyewaService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "PenyewaService",
            "createPenyewa"
          ],
          "fullName": "PenyewaService createPenyewa should create penyewa successfully",
          "status": "passed",
          "title": "should create penyewa successfully",
          "failureMessages": [],
          "duration": 107
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "createPenyewa"
          ],
          "fullName": "PenyewaService createPenyewa should throw error if phone number already exists",
          "status": "passed",
          "title": "should throw error if phone number already exists",
          "failureMessages": [],
          "duration": 16
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "createPenyewa"
          ],
          "fullName": "PenyewaService createPenyewa should handle database errors",
          "status": "passed",
          "title": "should handle database errors",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "getPenyewaById"
          ],
          "fullName": "PenyewaService getPenyewaById should return penyewa by ID",
          "status": "passed",
          "title": "should return penyewa by ID",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "getPenyewaById"
          ],
          "fullName": "PenyewaService getPenyewaById should throw error if penyewa not found",
          "status": "passed",
          "title": "should throw error if penyewa not found",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "getPenyewaList"
          ],
          "fullName": "PenyewaService getPenyewaList should return paginated penyewa list",
          "status": "passed",
          "title": "should return paginated penyewa list",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "getPenyewaList"
          ],
          "fullName": "PenyewaService getPenyewaList should search penyewa by name or phone",
          "status": "passed",
          "title": "should search penyewa by name or phone",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "getPenyewaList"
          ],
          "fullName": "PenyewaService getPenyewaList should handle empty results",
          "status": "passed",
          "title": "should handle empty results",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "updatePenyewa"
          ],
          "fullName": "PenyewaService updatePenyewa should update penyewa successfully",
          "status": "passed",
          "title": "should update penyewa successfully",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "updatePenyewa"
          ],
          "fullName": "PenyewaService updatePenyewa should throw error if penyewa not found",
          "status": "passed",
          "title": "should throw error if penyewa not found",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "updatePenyewa"
          ],
          "fullName": "PenyewaService updatePenyewa should validate phone uniqueness when updating phone",
          "status": "passed",
          "title": "should validate phone uniqueness when updating phone",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "findPenyewaByPhone"
          ],
          "fullName": "PenyewaService findPenyewaByPhone should find penyewa by phone number",
          "status": "passed",
          "title": "should find penyewa by phone number",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PenyewaService",
            "findPenyewaByPhone"
          ],
          "fullName": "PenyewaService findPenyewaByPhone should return null if penyewa not found",
          "status": "passed",
          "title": "should return null if penyewa not found",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\lib\\utils\\codeGenerator.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "UUID Validation"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features UUID Validation should validate correct UUID v4 format",
          "status": "passed",
          "title": "should validate correct UUID v4 format",
          "failureMessages": [],
          "duration": 12
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "UUID Validation"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features UUID Validation should reject invalid UUID formats",
          "status": "passed",
          "title": "should reject invalid UUID formats",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "Parameter Type Detection"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features Parameter Type Detection should correctly detect UUID parameters",
          "status": "passed",
          "title": "should correctly detect UUID parameters",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "Parameter Type Detection"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features Parameter Type Detection should correctly detect transaction code parameters",
          "status": "passed",
          "title": "should correctly detect transaction code parameters",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "Parameter Type Detection"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features Parameter Type Detection should correctly detect invalid parameters",
          "status": "passed",
          "title": "should correctly detect invalid parameters",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "Existing Transaction Code Functionality"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features Existing Transaction Code Functionality should still validate transaction codes correctly",
          "status": "passed",
          "title": "should still validate transaction codes correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransactionCodeGenerator Enhanced Features",
            "Existing Transaction Code Functionality"
          ],
          "fullName": "TransactionCodeGenerator Enhanced Features Existing Transaction Code Functionality should reject invalid transaction codes",
          "status": "passed",
          "title": "should reject invalid transaction codes",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\services\\pembayaranService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should create payment successfully",
          "status": "passed",
          "title": "should create payment successfully",
          "failureMessages": [],
          "duration": 39
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should throw error if transaction not found",
          "status": "passed",
          "title": "should throw error if transaction not found",
          "failureMessages": [],
          "duration": 26
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should throw error if transaction is cancelled",
          "status": "passed",
          "title": "should throw error if transaction is cancelled",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should throw error if transaction is completed",
          "status": "passed",
          "title": "should throw error if transaction is completed",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should throw error if payment amount is invalid",
          "status": "passed",
          "title": "should throw error if payment amount is invalid",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "createPembayaran"
          ],
          "fullName": "PembayaranService createPembayaran should handle overpayment validation",
          "status": "passed",
          "title": "should handle overpayment validation",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getTransactionPayments"
          ],
          "fullName": "PembayaranService getTransactionPayments should return payments for a transaction",
          "status": "passed",
          "title": "should return payments for a transaction",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPembayaranById"
          ],
          "fullName": "PembayaranService getPembayaranById should return payment by ID",
          "status": "passed",
          "title": "should return payment by ID",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPembayaranById"
          ],
          "fullName": "PembayaranService getPembayaranById should throw error if payment not found",
          "status": "passed",
          "title": "should throw error if payment not found",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentSummary"
          ],
          "fullName": "PembayaranService getPaymentSummary should return payment summary for transaction",
          "status": "passed",
          "title": "should return payment summary for transaction",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentSummary"
          ],
          "fullName": "PembayaranService getPaymentSummary should throw error if transaction not found for summary",
          "status": "passed",
          "title": "should throw error if transaction not found for summary",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentSummary"
          ],
          "fullName": "PembayaranService getPaymentSummary should handle transaction with no payments",
          "status": "passed",
          "title": "should handle transaction with no payments",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentList"
          ],
          "fullName": "PembayaranService getPaymentList should return paginated payment list",
          "status": "passed",
          "title": "should return paginated payment list",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentList"
          ],
          "fullName": "PembayaranService getPaymentList should filter payments by transaction ID",
          "status": "passed",
          "title": "should filter payments by transaction ID",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentList"
          ],
          "fullName": "PembayaranService getPaymentList should filter payments by method",
          "status": "passed",
          "title": "should filter payments by method",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentList"
          ],
          "fullName": "PembayaranService getPaymentList should filter payments by date range",
          "status": "passed",
          "title": "should filter payments by date range",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "cancelPayment"
          ],
          "fullName": "PembayaranService cancelPayment should cancel payment successfully",
          "status": "passed",
          "title": "should cancel payment successfully",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "cancelPayment"
          ],
          "fullName": "PembayaranService cancelPayment should throw error if payment not found for cancellation",
          "status": "passed",
          "title": "should throw error if payment not found for cancellation",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "cancelPayment"
          ],
          "fullName": "PembayaranService cancelPayment should throw error if transaction is already cancelled",
          "status": "passed",
          "title": "should throw error if transaction is already cancelled",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentStats"
          ],
          "fullName": "PembayaranService getPaymentStats should return payment statistics",
          "status": "passed",
          "title": "should return payment statistics",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentStats"
          ],
          "fullName": "PembayaranService getPaymentStats should filter statistics by date range",
          "status": "passed",
          "title": "should filter statistics by date range",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentStats"
          ],
          "fullName": "PembayaranService getPaymentStats should handle empty payment data",
          "status": "passed",
          "title": "should handle empty payment data",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PembayaranService",
            "getPaymentStats"
          ],
          "fullName": "PembayaranService getPaymentStats should aggregate payments by method correctly",
          "status": "passed",
          "title": "should aggregate payments by method correctly",
          "failureMessages": [],
          "duration": 2
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\lib\\utils.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "formatDate"
          ],
          "fullName": "formatDate should format valid date string correctly",
          "status": "passed",
          "title": "should format valid date string correctly",
          "failureMessages": [],
          "duration": 41
        },
        {
          "ancestorTitles": [
            "formatDate"
          ],
          "fullName": "formatDate should handle null/undefined dateString gracefully",
          "status": "passed",
          "title": "should handle null/undefined dateString gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "formatDate"
          ],
          "fullName": "formatDate should handle invalid date string gracefully",
          "status": "passed",
          "title": "should handle invalid date string gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "formatDate"
          ],
          "fullName": "formatDate should handle edge case dates",
          "status": "passed",
          "title": "should handle edge case dates",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\services\\availabilityService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should calculate availability for product with no active rentals",
          "status": "passed",
          "title": "should calculate availability for product with no active rentals",
          "failureMessages": [],
          "duration": 13
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should calculate availability considering active rentals",
          "status": "passed",
          "title": "should calculate availability considering active rentals",
          "failureMessages": [],
          "duration": 3
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should exclude fully returned items from rental calculation",
          "status": "passed",
          "title": "should exclude fully returned items from rental calculation",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should handle ongoing rentals with no end date",
          "status": "passed",
          "title": "should handle ongoing rentals with no end date",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should throw error if product not found",
          "status": "passed",
          "title": "should throw error if product not found",
          "failureMessages": [],
          "duration": 20
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getProductAvailability"
          ],
          "fullName": "AvailabilityService getProductAvailability should ensure available quantity never goes below zero",
          "status": "passed",
          "title": "should ensure available quantity never goes below zero",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getMultipleProductAvailability"
          ],
          "fullName": "AvailabilityService getMultipleProductAvailability should get availability for multiple products",
          "status": "passed",
          "title": "should get availability for multiple products",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "checkRentalAvailability"
          ],
          "fullName": "AvailabilityService checkRentalAvailability should return available=true when all items are available",
          "status": "passed",
          "title": "should return available=true when all items are available",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "checkRentalAvailability"
          ],
          "fullName": "AvailabilityService checkRentalAvailability should return conflicts when items are not available",
          "status": "passed",
          "title": "should return conflicts when items are not available",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getCategoryAvailability"
          ],
          "fullName": "AvailabilityService getCategoryAvailability should get availability for all products in a category",
          "status": "passed",
          "title": "should get availability for all products in a category",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "reserveProducts"
          ],
          "fullName": "AvailabilityService reserveProducts should reserve products when available",
          "status": "passed",
          "title": "should reserve products when available",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "reserveProducts"
          ],
          "fullName": "AvailabilityService reserveProducts should throw error when products not available for reservation",
          "status": "passed",
          "title": "should throw error when products not available for reservation",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getAvailabilitySummary"
          ],
          "fullName": "AvailabilityService getAvailabilitySummary should return availability summary for dashboard",
          "status": "passed",
          "title": "should return availability summary for dashboard",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getLowStockProducts"
          ],
          "fullName": "AvailabilityService getLowStockProducts should return products with low availability",
          "status": "passed",
          "title": "should return products with low availability",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "getLowStockProducts"
          ],
          "fullName": "AvailabilityService getLowStockProducts should sort low stock products by availability ascending",
          "status": "passed",
          "title": "should sort low stock products by availability ascending",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should validate all items successfully",
          "status": "passed",
          "title": "should validate all items successfully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should return error for nonexistent product",
          "status": "passed",
          "title": "should return error for nonexistent product",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should return error for inactive product",
          "status": "passed",
          "title": "should return error for inactive product",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should return errors for insufficient quantity",
          "status": "passed",
          "title": "should return errors for insufficient quantity",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should return warnings for low stock after rental",
          "status": "passed",
          "title": "should return warnings for low stock after rental",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "AvailabilityService",
            "validateTransactionItems"
          ],
          "fullName": "AvailabilityService validateTransactionItems should handle errors gracefully during validation",
          "status": "passed",
          "title": "should handle errors gracefully during validation",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "createAvailabilityService factory"
          ],
          "fullName": "createAvailabilityService factory should create availability service instance",
          "status": "passed",
          "title": "should create availability service instance",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\services\\transaksiService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "TransaksiService",
            "createTransaksi"
          ],
          "fullName": "TransaksiService createTransaksi should create transaksi successfully with auto-generated code",
          "status": "passed",
          "title": "should create transaksi successfully with auto-generated code",
          "failureMessages": [],
          "duration": 17
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "createTransaksi"
          ],
          "fullName": "TransaksiService createTransaksi should throw error if penyewa not found",
          "status": "passed",
          "title": "should throw error if penyewa not found",
          "failureMessages": [],
          "duration": 25
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "createTransaksi"
          ],
          "fullName": "TransaksiService createTransaksi should throw error if product not available",
          "status": "passed",
          "title": "should throw error if product not available",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "createTransaksi"
          ],
          "fullName": "TransaksiService createTransaksi should throw error if insufficient product quantity",
          "status": "passed",
          "title": "should throw error if insufficient product quantity",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiById"
          ],
          "fullName": "TransaksiService getTransaksiById should return transaksi by ID",
          "status": "passed",
          "title": "should return transaksi by ID",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiById"
          ],
          "fullName": "TransaksiService getTransaksiById should throw error if transaksi not found",
          "status": "passed",
          "title": "should throw error if transaksi not found",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiByCode"
          ],
          "fullName": "TransaksiService getTransaksiByCode should return transaksi by code",
          "status": "passed",
          "title": "should return transaksi by code",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiList"
          ],
          "fullName": "TransaksiService getTransaksiList should return paginated transaksi list",
          "status": "passed",
          "title": "should return paginated transaksi list",
          "failureMessages": [],
          "duration": 3
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiList"
          ],
          "fullName": "TransaksiService getTransaksiList should filter by status",
          "status": "passed",
          "title": "should filter by status",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiList"
          ],
          "fullName": "TransaksiService getTransaksiList should search by code or penyewa name",
          "status": "passed",
          "title": "should search by code or penyewa name",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "updateTransaksiStatus"
          ],
          "fullName": "TransaksiService updateTransaksiStatus should update transaksi status successfully",
          "status": "passed",
          "title": "should update transaksi status successfully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "updateTransaksiStatus"
          ],
          "fullName": "TransaksiService updateTransaksiStatus should throw error if transaksi not found",
          "status": "passed",
          "title": "should throw error if transaksi not found",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "updateTransaksiStatus"
          ],
          "fullName": "TransaksiService updateTransaksiStatus should validate status transitions",
          "status": "passed",
          "title": "should validate status transitions",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "TransaksiService",
            "getTransaksiStats"
          ],
          "fullName": "TransaksiService getTransaksiStats should return transaction statistics",
          "status": "passed",
          "title": "should return transaction statistics",
          "failureMessages": [],
          "duration": 0
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\lib\\validation\\pickupValidation.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateTransactionStatus"
          ],
          "fullName": "PickupBusinessRules validateTransactionStatus should validate active transaction status",
          "status": "passed",
          "title": "should validate active transaction status",
          "failureMessages": [],
          "duration": 13
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateTransactionStatus"
          ],
          "fullName": "PickupBusinessRules validateTransactionStatus should reject non-active transaction status",
          "status": "passed",
          "title": "should reject non-active transaction status",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupQuantity"
          ],
          "fullName": "PickupBusinessRules validatePickupQuantity should reject zero or negative quantity",
          "status": "passed",
          "title": "should reject zero or negative quantity",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupQuantity"
          ],
          "fullName": "PickupBusinessRules validatePickupQuantity should reject quantity exceeding available",
          "status": "passed",
          "title": "should reject quantity exceeding available",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupQuantity"
          ],
          "fullName": "PickupBusinessRules validatePickupQuantity should warn for partial pickup",
          "status": "passed",
          "title": "should warn for partial pickup",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateItemNotFullyPickedUp"
          ],
          "fullName": "PickupBusinessRules validateItemNotFullyPickedUp should allow pickup for available items",
          "status": "passed",
          "title": "should allow pickup for available items",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateItemNotFullyPickedUp"
          ],
          "fullName": "PickupBusinessRules validateItemNotFullyPickedUp should reject pickup for fully picked up items",
          "status": "passed",
          "title": "should reject pickup for fully picked up items",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupBatchLimits"
          ],
          "fullName": "PickupBusinessRules validatePickupBatchLimits should validate normal batch size",
          "status": "passed",
          "title": "should validate normal batch size",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupBatchLimits"
          ],
          "fullName": "PickupBusinessRules validatePickupBatchLimits should warn for large batches",
          "status": "passed",
          "title": "should warn for large batches",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupBatchLimits"
          ],
          "fullName": "PickupBusinessRules validatePickupBatchLimits should reject batches exceeding item limit",
          "status": "passed",
          "title": "should reject batches exceeding item limit",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validatePickupBatchLimits"
          ],
          "fullName": "PickupBusinessRules validatePickupBatchLimits should reject batches exceeding quantity limit",
          "status": "passed",
          "title": "should reject batches exceeding quantity limit",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateNoDuplicateItems"
          ],
          "fullName": "PickupBusinessRules validateNoDuplicateItems should validate unique items",
          "status": "passed",
          "title": "should validate unique items",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateNoDuplicateItems"
          ],
          "fullName": "PickupBusinessRules validateNoDuplicateItems should reject duplicate items",
          "status": "passed",
          "title": "should reject duplicate items",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateBusinessHours"
          ],
          "fullName": "PickupBusinessRules validateBusinessHours should validate normal business hours",
          "status": "passed",
          "title": "should validate normal business hours",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateBusinessHours"
          ],
          "fullName": "PickupBusinessRules validateBusinessHours should warn for weekend pickup",
          "status": "passed",
          "title": "should warn for weekend pickup",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateBusinessHours"
          ],
          "fullName": "PickupBusinessRules validateBusinessHours should warn for outside business hours",
          "status": "passed",
          "title": "should warn for outside business hours",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateConcurrentPickup"
          ],
          "fullName": "PickupBusinessRules validateConcurrentPickup should validate when no concurrent pickup detected",
          "status": "passed",
          "title": "should validate when no concurrent pickup detected",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "PickupBusinessRules",
            "validateConcurrentPickup"
          ],
          "fullName": "PickupBusinessRules validateConcurrentPickup should detect potential concurrent pickup",
          "status": "passed",
          "title": "should detect potential concurrent pickup",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "PickupValidator",
            "validatePickupRequest"
          ],
          "fullName": "PickupValidator validatePickupRequest should perform comprehensive validation and return valid result",
          "status": "passed",
          "title": "should perform comprehensive validation and return valid result",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "PickupValidator",
            "validatePickupRequest"
          ],
          "fullName": "PickupValidator validatePickupRequest should detect multiple validation errors",
          "status": "passed",
          "title": "should detect multiple validation errors",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupValidator",
            "validatePickupRequest"
          ],
          "fullName": "PickupValidator validatePickupRequest should categorize validation results correctly",
          "status": "passed",
          "title": "should categorize validation results correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupValidator",
            "generateValidationReport"
          ],
          "fullName": "PickupValidator generateValidationReport should generate comprehensive validation report",
          "status": "passed",
          "title": "should generate comprehensive validation report",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "PickupValidator",
            "generateValidationReport"
          ],
          "fullName": "PickupValidator generateValidationReport should generate valid status report",
          "status": "passed",
          "title": "should generate valid status report",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\kasir\\hooks\\usePickupProcess.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "usePickupProcess"
          ],
          "fullName": "usePickupProcess should handle successful pickup",
          "status": "passed",
          "title": "should handle successful pickup",
          "failureMessages": [],
          "duration": 86
        },
        {
          "ancestorTitles": [
            "usePickupProcess"
          ],
          "fullName": "usePickupProcess should handle failed pickup",
          "status": "passed",
          "title": "should handle failed pickup",
          "failureMessages": [],
          "duration": 86
        },
        {
          "ancestorTitles": [
            "usePickupValidation"
          ],
          "fullName": "usePickupValidation should validate pickup items correctly",
          "status": "passed",
          "title": "should validate pickup items correctly",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "usePickupValidation"
          ],
          "fullName": "usePickupValidation should reject excessive pickup quantities",
          "status": "passed",
          "title": "should reject excessive pickup quantities",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "usePickupValidation"
          ],
          "fullName": "usePickupValidation should reject zero quantities",
          "status": "passed",
          "title": "should reject zero quantities",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "usePickupValidation"
          ],
          "fullName": "usePickupValidation should require at least one item for pickup",
          "status": "passed",
          "title": "should require at least one item for pickup",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    }
  ]
}