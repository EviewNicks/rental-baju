generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique
}

model Product {
  id               String          @id @default(uuid())
  code             String          @unique
  name             String
  description      String?
  modalAwal        Decimal         @db.Decimal(10, 2)
  currentPrice     Decimal         @db.Decimal(10, 2)
  quantity         Int
  rentedStock      Int             @default(0)
  imageUrl         String?
  categoryId       String
  size             String?
  colorId          String?
  materialId       String?
  materialCost     Decimal?        @db.Decimal(10, 2)
  materialQuantity Int?
  status           ProductStatus   @default(AVAILABLE)
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  createdBy        String
  category         Category        @relation(fields: [categoryId], references: [id])
  color            Color?          @relation(fields: [colorId], references: [id])
  material         Material?       @relation(fields: [materialId], references: [id])
  transaksiItems   TransaksiItem[]

  @@index([isActive])
  @@index([categoryId])
  @@index([status])
  @@index([createdBy])
  @@index([size])
  @@index([colorId])
  @@index([categoryId, size, colorId])
  @@index([rentedStock])
  @@index([id, modalAwal], map: "idx_product_penalty_calc")
  @@index([materialId])
  @@index([materialCost], map: "idx_product_material_cost")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  products  Product[]

  @@index([createdBy])
}

model Color {
  id          String    @id @default(uuid())
  name        String    @unique
  hexCode     String?
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  products    Product[]

  @@index([createdBy])
  @@index([isActive])
  @@map("colors")
}

model Material {
  id           String    @id @default(uuid())
  name         String    @unique
  pricePerUnit Decimal   @db.Decimal(10, 2)
  unit         String    @default("meter")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String
  products     Product[]

  @@index([name])
  @@index([createdBy])
  @@map("materials")
}

model Penyewa {
  id        String      @id @default(uuid())
  nama      String
  telepon   String      @unique
  alamat    String
  email     String?
  nik       String?
  foto      String?
  catatan   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  transaksi Transaksi[]

  @@index([telepon])
  @@index([nama])
  @@map("penyewa")
}

model Transaksi {
  id          String               @id @default(uuid())
  kode        String               @unique
  penyewaId   String
  status      String               @default("active")
  totalHarga  Decimal              @default(0) @db.Decimal(10, 2)
  jumlahBayar Decimal              @default(0) @db.Decimal(10, 2)
  sisaBayar   Decimal              @default(0) @db.Decimal(10, 2)
  tglMulai    DateTime
  tglSelesai  DateTime?
  tglKembali  DateTime?
  metodeBayar String               @default("tunai")
  catatan     String?
  createdBy   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  aktivitas   AktivitasTransaksi[]
  pembayaran  Pembayaran[]
  penyewa     Penyewa              @relation(fields: [penyewaId], references: [id])
  items       TransaksiItem[]

  @@index([kode])
  @@index([status])
  @@index([penyewaId])
  @@index([createdAt])
  @@index([status, id], map: "idx_transaksi_status_id_validation")
  @@index([id, tglSelesai, status], map: "idx_transaksi_penalty_dates")
  @@map("transaksi")
}

model TransaksiItem {
  id                     String                @id @default(uuid())
  transaksiId            String
  produkId               String
  jumlah                 Int                   @default(1)
  jumlahDiambil          Int                   @default(0)
  hargaSewa              Decimal               @db.Decimal(10, 2)
  durasi                 Int
  subtotal               Decimal               @db.Decimal(10, 2)
  kondisiAwal            String?
  statusKembali          String                @default("belum")
  conditionCount         Int                   @default(1)
  migratedFromSingleMode Boolean               @default(false)
  totalReturnPenalty     Decimal               @default(0) @db.Decimal(10, 2)
  produk                 Product               @relation(fields: [produkId], references: [id])
  transaksi              Transaksi             @relation(fields: [transaksiId], references: [id], onDelete: Cascade)
  returnConditions       TransaksiItemReturn[]

  @@index([transaksiId])
  @@index([produkId])
  @@index([id, statusKembali, jumlahDiambil], map: "idx_transaksi_item_status_lookup")
  @@index([produkId, transaksiId, statusKembali], map: "idx_transaksi_item_product_join")
  @@index([id, statusKembali, conditionCount], map: "idx_transaksi_item_unified_processing")
  @@index([migratedFromSingleMode, conditionCount], map: "idx_transaksi_item_migration_history")
  @@map("transaksi_item")
}

model TransaksiItemReturn {
  id                 String        @id @default(uuid())
  transaksiItemId    String
  kondisiAkhir       String
  jumlahKembali      Int
  penaltyAmount      Decimal       @default(0) @db.Decimal(10, 2)
  modalAwalUsed      Decimal?      @db.Decimal(10, 2)
  penaltyCalculation Json?
  createdAt          DateTime      @default(now())
  createdBy          String
  transaksiItem      TransaksiItem @relation(fields: [transaksiItemId], references: [id], onDelete: Cascade)

  @@index([transaksiItemId, createdAt], map: "idx_transaksi_item_return_timeline")
  @@index([transaksiItemId, penaltyAmount], map: "idx_transaksi_item_return_penalty")
  @@map("transaksi_item_return")
}

model Pembayaran {
  id          String    @id @default(uuid())
  transaksiId String
  jumlah      Decimal   @db.Decimal(10, 2)
  metode      String
  referensi   String?
  catatan     String?
  createdBy   String
  createdAt   DateTime  @default(now())
  transaksi   Transaksi @relation(fields: [transaksiId], references: [id], onDelete: Cascade)

  @@index([transaksiId])
  @@index([createdAt])
  @@map("pembayaran")
}

model AktivitasTransaksi {
  id          String    @id @default(uuid())
  transaksiId String
  tipe        String
  deskripsi   String
  data        Json?
  createdBy   String
  createdAt   DateTime  @default(now())
  transaksi   Transaksi @relation(fields: [transaksiId], references: [id], onDelete: Cascade)

  @@index([transaksiId])
  @@index([tipe])
  @@index([createdAt])
  @@map("aktivitas_transaksi")
}

model FileUpload {
  id         String   @id @default(uuid())
  filename   String
  url        String
  mimetype   String
  size       Int
  entityType String
  entityId   String
  createdBy  String
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("file_upload")
}

enum ProductStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}
