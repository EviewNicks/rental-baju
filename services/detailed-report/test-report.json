{
  "numTotalTests": 109,
  "numPassedTests": 109,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "startTime": "2025-07-20T00:43:38.445Z",
  "endTime": "2025-07-20T00:43:42.519Z",
  "testResults": [
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\manage-product\\services\\fileUploadService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "FileUploadService",
            "validateFile"
          ],
          "fullName": "FileUploadService validateFile should validate file successfully - happy path",
          "status": "passed",
          "title": "should validate file successfully - happy path",
          "failureMessages": [],
          "duration": 6
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "validateFile"
          ],
          "fullName": "FileUploadService validateFile should reject file that is too large",
          "status": "passed",
          "title": "should reject file that is too large",
          "failureMessages": [],
          "duration": 15
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "validateFile"
          ],
          "fullName": "FileUploadService validateFile should reject unsupported file format",
          "status": "passed",
          "title": "should reject unsupported file format",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "validateFile"
          ],
          "fullName": "FileUploadService validateFile should handle null file gracefully",
          "status": "passed",
          "title": "should handle null file gracefully",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "validateFile"
          ],
          "fullName": "FileUploadService validateFile should handle undefined file gracefully",
          "status": "passed",
          "title": "should handle undefined file gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "generateImagePath"
          ],
          "fullName": "FileUploadService generateImagePath should generate valid image path with timestamp",
          "status": "passed",
          "title": "should generate valid image path with timestamp",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "generateImagePath"
          ],
          "fullName": "FileUploadService generateImagePath should handle different file extensions",
          "status": "passed",
          "title": "should handle different file extensions",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "generateImagePath"
          ],
          "fullName": "FileUploadService generateImagePath should include user ID in path for isolation",
          "status": "passed",
          "title": "should include user ID in path for isolation",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "extractPathFromUrl"
          ],
          "fullName": "FileUploadService extractPathFromUrl should extract path from storage URL correctly",
          "status": "passed",
          "title": "should extract path from storage URL correctly",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "extractPathFromUrl"
          ],
          "fullName": "FileUploadService extractPathFromUrl should handle URLs with query parameters",
          "status": "passed",
          "title": "should handle URLs with query parameters",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "extractPathFromUrl"
          ],
          "fullName": "FileUploadService extractPathFromUrl should handle invalid URLs gracefully",
          "status": "passed",
          "title": "should handle invalid URLs gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "extractPathFromUrl"
          ],
          "fullName": "FileUploadService extractPathFromUrl should handle empty URL",
          "status": "passed",
          "title": "should handle empty URL",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "extractPathFromUrl"
          ],
          "fullName": "FileUploadService extractPathFromUrl should handle null URL",
          "status": "passed",
          "title": "should handle null URL",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "uploadProductImage"
          ],
          "fullName": "FileUploadService uploadProductImage should handle null file input",
          "status": "passed",
          "title": "should handle null file input",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "uploadProductImage"
          ],
          "fullName": "FileUploadService uploadProductImage should handle undefined file input",
          "status": "passed",
          "title": "should handle undefined file input",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "deleteProductImage"
          ],
          "fullName": "FileUploadService deleteProductImage should handle empty image path gracefully",
          "status": "passed",
          "title": "should handle empty image path gracefully",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "FileUploadService",
            "deleteProductImage"
          ],
          "fullName": "FileUploadService deleteProductImage should handle null image path gracefully",
          "status": "passed",
          "title": "should handle null image path gracefully",
          "failureMessages": [],
          "duration": 0
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\manage-product\\services\\categoryService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "CategoryService",
            "createCategory"
          ],
          "fullName": "CategoryService createCategory should create category successfully - happy path",
          "status": "passed",
          "title": "should create category successfully - happy path",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "createCategory"
          ],
          "fullName": "CategoryService createCategory should throw error when category name already exists",
          "status": "passed",
          "title": "should throw error when category name already exists",
          "failureMessages": [],
          "duration": 17
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "createCategory"
          ],
          "fullName": "CategoryService createCategory should handle case-insensitive name checking",
          "status": "passed",
          "title": "should handle case-insensitive name checking",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "createCategory"
          ],
          "fullName": "CategoryService createCategory should handle validation error gracefully",
          "status": "passed",
          "title": "should handle validation error gracefully",
          "failureMessages": [],
          "duration": 8
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "createCategory"
          ],
          "fullName": "CategoryService createCategory should handle database error during creation",
          "status": "passed",
          "title": "should handle database error during creation",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "updateCategory"
          ],
          "fullName": "CategoryService updateCategory should update category successfully - happy path",
          "status": "passed",
          "title": "should update category successfully - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "updateCategory"
          ],
          "fullName": "CategoryService updateCategory should throw error when category not found",
          "status": "passed",
          "title": "should throw error when category not found",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "updateCategory"
          ],
          "fullName": "CategoryService updateCategory should throw error when updated name conflicts with existing category",
          "status": "passed",
          "title": "should throw error when updated name conflicts with existing category",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "updateCategory"
          ],
          "fullName": "CategoryService updateCategory should handle partial update (only color)",
          "status": "passed",
          "title": "should handle partial update (only color)",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "updateCategory"
          ],
          "fullName": "CategoryService updateCategory should handle empty update request gracefully",
          "status": "passed",
          "title": "should handle empty update request gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategories"
          ],
          "fullName": "CategoryService getCategories should get all categories without products - happy path",
          "status": "passed",
          "title": "should get all categories without products - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategories"
          ],
          "fullName": "CategoryService getCategories should get categories with products when requested",
          "status": "passed",
          "title": "should get categories with products when requested",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategories"
          ],
          "fullName": "CategoryService getCategories should filter categories by search term",
          "status": "passed",
          "title": "should filter categories by search term",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategories"
          ],
          "fullName": "CategoryService getCategories should handle empty results",
          "status": "passed",
          "title": "should handle empty results",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategories"
          ],
          "fullName": "CategoryService getCategories should handle query without parameters",
          "status": "passed",
          "title": "should handle query without parameters",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategoryById"
          ],
          "fullName": "CategoryService getCategoryById should get category by ID successfully - happy path",
          "status": "passed",
          "title": "should get category by ID successfully - happy path",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategoryById"
          ],
          "fullName": "CategoryService getCategoryById should throw error when category not found",
          "status": "passed",
          "title": "should throw error when category not found",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "getCategoryById"
          ],
          "fullName": "CategoryService getCategoryById should handle invalid ID format",
          "status": "passed",
          "title": "should handle invalid ID format",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "deleteCategory"
          ],
          "fullName": "CategoryService deleteCategory should delete category successfully when no products exist - happy path",
          "status": "passed",
          "title": "should delete category successfully when no products exist - happy path",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "deleteCategory"
          ],
          "fullName": "CategoryService deleteCategory should throw error when category not found",
          "status": "passed",
          "title": "should throw error when category not found",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "deleteCategory"
          ],
          "fullName": "CategoryService deleteCategory should throw error when category has active products",
          "status": "passed",
          "title": "should throw error when category has active products",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "deleteCategory"
          ],
          "fullName": "CategoryService deleteCategory should allow deletion when category has only inactive products",
          "status": "passed",
          "title": "should allow deletion when category has only inactive products",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "CategoryService",
            "deleteCategory"
          ],
          "fullName": "CategoryService deleteCategory should handle database error during deletion",
          "status": "passed",
          "title": "should handle database error during deletion",
          "failureMessages": [],
          "duration": 0
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\manage-product\\services\\productService.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "ProductService",
            "createProduct"
          ],
          "fullName": "ProductService createProduct should create product successfully - happy path",
          "status": "passed",
          "title": "should create product successfully - happy path",
          "failureMessages": [],
          "duration": 11
        },
        {
          "ancestorTitles": [
            "ProductService",
            "createProduct"
          ],
          "fullName": "ProductService createProduct should throw error when product code already exists",
          "status": "passed",
          "title": "should throw error when product code already exists",
          "failureMessages": [],
          "duration": 23
        },
        {
          "ancestorTitles": [
            "ProductService",
            "createProduct"
          ],
          "fullName": "ProductService createProduct should handle validation error gracefully",
          "status": "passed",
          "title": "should handle validation error gracefully",
          "failureMessages": [],
          "duration": 5
        },
        {
          "ancestorTitles": [
            "ProductService",
            "createProduct"
          ],
          "fullName": "ProductService createProduct should handle database error during creation",
          "status": "passed",
          "title": "should handle database error during creation",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProduct"
          ],
          "fullName": "ProductService updateProduct should update product successfully - happy path",
          "status": "passed",
          "title": "should update product successfully - happy path",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProduct"
          ],
          "fullName": "ProductService updateProduct should throw error when product not found",
          "status": "passed",
          "title": "should throw error when product not found",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProduct"
          ],
          "fullName": "ProductService updateProduct should handle empty update request gracefully",
          "status": "passed",
          "title": "should handle empty update request gracefully",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProducts"
          ],
          "fullName": "ProductService getProducts should get products with pagination and filters - happy path",
          "status": "passed",
          "title": "should get products with pagination and filters - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProducts"
          ],
          "fullName": "ProductService getProducts should handle query without filters",
          "status": "passed",
          "title": "should handle query without filters",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProducts"
          ],
          "fullName": "ProductService getProducts should handle empty results",
          "status": "passed",
          "title": "should handle empty results",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProductById"
          ],
          "fullName": "ProductService getProductById should get product by ID successfully - happy path",
          "status": "passed",
          "title": "should get product by ID successfully - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProductById"
          ],
          "fullName": "ProductService getProductById should throw error when product not found",
          "status": "passed",
          "title": "should throw error when product not found",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "ProductService",
            "getProductById"
          ],
          "fullName": "ProductService getProductById should handle invalid ID format",
          "status": "passed",
          "title": "should handle invalid ID format",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "deleteProduct"
          ],
          "fullName": "ProductService deleteProduct should soft delete product successfully - happy path",
          "status": "passed",
          "title": "should soft delete product successfully - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "deleteProduct"
          ],
          "fullName": "ProductService deleteProduct should throw error when product not found",
          "status": "passed",
          "title": "should throw error when product not found",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProductStatus"
          ],
          "fullName": "ProductService updateProductStatus should update product status successfully - happy path",
          "status": "passed",
          "title": "should update product status successfully - happy path",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProductStatus"
          ],
          "fullName": "ProductService updateProductStatus should throw error when trying to set same status",
          "status": "passed",
          "title": "should throw error when trying to set same status",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "ProductService",
            "updateProductStatus"
          ],
          "fullName": "ProductService updateProductStatus should handle invalid status value",
          "status": "passed",
          "title": "should handle invalid status value",
          "failureMessages": [],
          "duration": 0
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\.work\\rental-software\\features\\manage-product\\lib\\validation\\productSchema.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema"
          ],
          "fullName": "Product Schema Validation productBaseSchema should validate valid product data - happy path",
          "status": "passed",
          "title": "should validate valid product data - happy path",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should accept valid 4-character alphanumeric uppercase code",
          "status": "passed",
          "title": "should accept valid 4-character alphanumeric uppercase code",
          "failureMessages": [],
          "duration": 3
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should reject code that is too short",
          "status": "passed",
          "title": "should reject code that is too short",
          "failureMessages": [],
          "duration": 19
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should reject code that is too long",
          "status": "passed",
          "title": "should reject code that is too long",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should reject code with lowercase characters",
          "status": "passed",
          "title": "should reject code with lowercase characters",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should reject code with special characters",
          "status": "passed",
          "title": "should reject code with special characters",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "code validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema code validation should reject empty code",
          "status": "passed",
          "title": "should reject empty code",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "name validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema name validation should accept valid product names",
          "status": "passed",
          "title": "should accept valid product names",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "name validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema name validation should reject empty name",
          "status": "passed",
          "title": "should reject empty name",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "name validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema name validation should reject name that is too long",
          "status": "passed",
          "title": "should reject name that is too long",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "description validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema description validation should accept valid descriptions",
          "status": "passed",
          "title": "should accept valid descriptions",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "description validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema description validation should reject description that is too long",
          "status": "passed",
          "title": "should reject description that is too long",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "modalAwal validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema modalAwal validation should accept positive numbers",
          "status": "passed",
          "title": "should accept positive numbers",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "modalAwal validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema modalAwal validation should reject zero or negative numbers",
          "status": "passed",
          "title": "should reject zero or negative numbers",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "modalAwal validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema modalAwal validation should reject values that are too large",
          "status": "passed",
          "title": "should reject values that are too large",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "hargaSewa validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema hargaSewa validation should accept positive numbers",
          "status": "passed",
          "title": "should accept positive numbers",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "hargaSewa validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema hargaSewa validation should reject zero or negative numbers",
          "status": "passed",
          "title": "should reject zero or negative numbers",
          "failureMessages": [],
          "duration": 5
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "hargaSewa validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema hargaSewa validation should reject values that are too large",
          "status": "passed",
          "title": "should reject values that are too large",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "quantity validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema quantity validation should accept valid integer quantities",
          "status": "passed",
          "title": "should accept valid integer quantities",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "quantity validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema quantity validation should reject negative quantities",
          "status": "passed",
          "title": "should reject negative quantities",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "quantity validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema quantity validation should reject quantities that are too large",
          "status": "passed",
          "title": "should reject quantities that are too large",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "quantity validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema quantity validation should reject decimal quantities",
          "status": "passed",
          "title": "should reject decimal quantities",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "categoryId validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema categoryId validation should accept valid UUID",
          "status": "passed",
          "title": "should accept valid UUID",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productBaseSchema",
            "categoryId validation"
          ],
          "fullName": "Product Schema Validation productBaseSchema categoryId validation should reject invalid UUID formats",
          "status": "passed",
          "title": "should reject invalid UUID formats",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "imageFileSchema"
          ],
          "fullName": "Product Schema Validation imageFileSchema should accept valid image files",
          "status": "passed",
          "title": "should accept valid image files",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "imageFileSchema"
          ],
          "fullName": "Product Schema Validation imageFileSchema should accept undefined and null values",
          "status": "passed",
          "title": "should accept undefined and null values",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "imageFileSchema"
          ],
          "fullName": "Product Schema Validation imageFileSchema should reject files that are too large",
          "status": "passed",
          "title": "should reject files that are too large",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "imageFileSchema"
          ],
          "fullName": "Product Schema Validation imageFileSchema should reject unsupported file types",
          "status": "passed",
          "title": "should reject unsupported file types",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "imageFileSchema"
          ],
          "fullName": "Product Schema Validation imageFileSchema should accept supported file types",
          "status": "passed",
          "title": "should accept supported file types",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "createProductSchema"
          ],
          "fullName": "Product Schema Validation createProductSchema should validate create product data with image",
          "status": "passed",
          "title": "should validate create product data with image",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "createProductSchema"
          ],
          "fullName": "Product Schema Validation createProductSchema should validate create product data without image",
          "status": "passed",
          "title": "should validate create product data without image",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "updateProductSchema"
          ],
          "fullName": "Product Schema Validation updateProductSchema should validate partial product updates",
          "status": "passed",
          "title": "should validate partial product updates",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "updateProductSchema"
          ],
          "fullName": "Product Schema Validation updateProductSchema should validate update with image",
          "status": "passed",
          "title": "should validate update with image",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productQuerySchema"
          ],
          "fullName": "Product Schema Validation productQuerySchema should validate query parameters with defaults",
          "status": "passed",
          "title": "should validate query parameters with defaults",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productQuerySchema"
          ],
          "fullName": "Product Schema Validation productQuerySchema should validate complete query parameters",
          "status": "passed",
          "title": "should validate complete query parameters",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productQuerySchema"
          ],
          "fullName": "Product Schema Validation productQuerySchema should enforce page and limit boundaries",
          "status": "passed",
          "title": "should enforce page and limit boundaries",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productQuerySchema"
          ],
          "fullName": "Product Schema Validation productQuerySchema should validate status enum values",
          "status": "passed",
          "title": "should validate status enum values",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productParamsSchema"
          ],
          "fullName": "Product Schema Validation productParamsSchema should validate valid UUID parameter",
          "status": "passed",
          "title": "should validate valid UUID parameter",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Product Schema Validation",
            "productParamsSchema"
          ],
          "fullName": "Product Schema Validation productParamsSchema should reject invalid UUID parameter",
          "status": "passed",
          "title": "should reject invalid UUID parameter",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema"
          ],
          "fullName": "Category Schema Validation categorySchema should validate valid category data - happy path",
          "status": "passed",
          "title": "should validate valid category data - happy path",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema",
            "name validation"
          ],
          "fullName": "Category Schema Validation categorySchema name validation should accept valid category names",
          "status": "passed",
          "title": "should accept valid category names",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema",
            "name validation"
          ],
          "fullName": "Category Schema Validation categorySchema name validation should reject empty name",
          "status": "passed",
          "title": "should reject empty name",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema",
            "name validation"
          ],
          "fullName": "Category Schema Validation categorySchema name validation should reject name that is too long",
          "status": "passed",
          "title": "should reject name that is too long",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema",
            "color validation"
          ],
          "fullName": "Category Schema Validation categorySchema color validation should accept valid hex colors",
          "status": "passed",
          "title": "should accept valid hex colors",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categorySchema",
            "color validation"
          ],
          "fullName": "Category Schema Validation categorySchema color validation should reject invalid color formats",
          "status": "passed",
          "title": "should reject invalid color formats",
          "failureMessages": [],
          "duration": 3
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "updateCategorySchema"
          ],
          "fullName": "Category Schema Validation updateCategorySchema should validate partial category updates",
          "status": "passed",
          "title": "should validate partial category updates",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categoryQuerySchema"
          ],
          "fullName": "Category Schema Validation categoryQuerySchema should validate query parameters with defaults",
          "status": "passed",
          "title": "should validate query parameters with defaults",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categoryQuerySchema"
          ],
          "fullName": "Category Schema Validation categoryQuerySchema should validate complete query parameters",
          "status": "passed",
          "title": "should validate complete query parameters",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categoryQuerySchema"
          ],
          "fullName": "Category Schema Validation categoryQuerySchema should coerce includeProducts to boolean",
          "status": "passed",
          "title": "should coerce includeProducts to boolean",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categoryParamsSchema"
          ],
          "fullName": "Category Schema Validation categoryParamsSchema should validate valid UUID parameter",
          "status": "passed",
          "title": "should validate valid UUID parameter",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "Category Schema Validation",
            "categoryParamsSchema"
          ],
          "fullName": "Category Schema Validation categoryParamsSchema should reject invalid UUID parameter",
          "status": "passed",
          "title": "should reject invalid UUID parameter",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    }
  ]
}